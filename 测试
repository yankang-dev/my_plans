https://exam.nowcoder.com/test/video
（https://www.nowcoder.com/activity/oj），建议进入“华为机试在线训练”模块进行摸底。另外，“剑指offer”和“leetcode”模块，里面的题目也比较典型。建议考生先在以上模块做摸底，对考试的内容和题型做一个大致的了解后，再进入正式考试环节
考试主要是基础知识的测试，复习时重点关注以下知识点；
1、数组的各种操作（各种排序算法的实现、去重，二维数组）
2、并交集
3、字符串操作（典型如：字符转ascii码后各种操作，之后在转换成字符）
4、堆栈
5、滑窗（如：满足要求的最长字符串），其中最长连续XXX类的题型有50%的概率会遇到，重点掌握；
6、动态规划（二星题目会涉及）
建议了解：贪心、分查找、双指针、图、位运算、二分查找

时间限制：2秒 | 内存限制：102400K | 语言限制：不限
有N个正整数组成的一个序列。给定整数sum，求长度最长的连续子序列，使他们的和等于sum，返回此子序列的长度，如果没有满足要求的序列，返回-1。
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        List<Integer> vals = new ArrayList<>();
        if(in.hasNextLine()){
            String[] si =in.nextLine().split(",");
            for(int i=0;i<si.length;i++){
                vals.add(Integer.valueOf(si[i]));
            }
        }
        int sum = 0;
        if(!in.hasNextLine()){
            System.out.println("-1");
        }else{
            sum = Integer.valueOf(in.nextLine());

            if(vals.size() <= 0){
                System.out.println("-1");
            }else{
                int maxk = -1;

                for(int i=0;i<vals.size();i++){
                    int k =-1;
                    Integer s = Integer.valueOf(vals.get(i));
                    if(s.intValue() == sum){
                        k = 1;
                    }else if(s.intValue() > sum){
                        k=-1;
                    }else {
                        k=1;
                        for (int j = i + 1; j < vals.size(); j++) {
                            s = s+vals.get(j);
                            if(s.intValue() > sum){
                                k=-1;
                                break;
                            }
                            if(s.intValue() == sum){
                                k++;
                                break;
                            }
                            k++;
                        }
                        if(s.intValue() != sum){
                            k = -1;
                        }
                    }
                    maxk = Math.max(maxk,k);
                }

                System.out.println(maxk);
            }
        }
    }
}
5.2.2	按索引范围翻转文章片段 （*）
时间限制：1秒 | 内存限制：262144K | 语言限制：不限
输入一个英文文章片段，翻转指定区间的单词顺序，标点符号和普通字母一样处理。例如输入字符串"I am a developer. "，区间[0,3]，则输出"developer. a am I"。
参考代码（Java）
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String englishStr = scanner.nextLine().trim();
        int start = Integer.valueOf(scanner.nextLine().trim());
        int end = Integer.valueOf(scanner.nextLine().trim());
        String[] wordArr = englishStr.split("\\s+");
        start = start < wordArr.length? start: wordArr.length - 1;
        end = end < wordArr.length? end: wordArr.length - 1;
        start = start < 0? 0: start;
        end = end < 0? 0: end;
        if(start < end && (end - start + 1) <= wordArr.length){
            String temp = "";
            for(int i = start, len = (end + start)/2; i <= len; i++){
                temp = wordArr[i];
                wordArr[i] = wordArr[start + end - i];
                wordArr[start + end -i] = temp;
            }
            StringBuilder sb = new StringBuilder();
            for(int i = 0, len = wordArr.length; i < len; i++){
                sb.append(wordArr[i]);
                if(i < len -1){
                    sb.append(" ");
                }
            }
            System.out.println(sb.toString());
        }else{
            System.out.println("EMPTY");
        }
    }
}

5.2.3	N进制减法（*）
时间限制：1秒 | 内存限制：262144K | 语言限制：不限
实现一个基于字符串的N机制的减法。 
需要对输入的两个字符串按照给定的N进制进行减法操作，输出正负符号和表示结果的字符串

5.2.4	数组去重和排序（*）
时间限制：1秒 | 内存限制：262144K | 语言限制：不限
给定一个乱序的数组，删除所有的重复元素，使得每个元素只出现一次，并且按照出现的次数从高到低进行排序，相同出现次数按照第一次出现顺序进行先后排序。
import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner in  = new Scanner(System.in);
        // < 100 <0?
        while(in.hasNext()){
            String inString = in.nextLine();
            String[] arr = inString.split(",");
            Map<String, Integer> nums = new HashMap();
            List<String> re = new ArrayList(); // 去重
            for (String s : arr) {
                if (!re.contains(s)){
                    re.add(s);
                }

                if (nums.containsKey(s)){
                    nums.put(s, nums.get(s) + 1);
                }else {
                    nums.put(s, 1);
                }
            }

            Collections.sort(re, (s1, s2) -> {
                return nums.get(s2) - nums.get(s1);
            });

            for (int i = 0; i < re.size(); i++){
                System.out.print(re.get(i));
                if (i != re.size() -1) {
                    System.out.print(",");
                }
            }
            System.out.println();
        }
    }
}
5.2.5	判断一组不等式是否满足约束并输出最大差 （*）
时间限制：1秒 | 内存限制：65536K | 语言限制：不限
给定一组不等式，判断是否成立并输出不等式的最大差(输出浮点数的整数部分)，要求：1）不等式系数为double类型，是一个二维数组；2）不等式的变量为int类型，是一维数组；3）不等式的目标值为double类型，是一维数组；4）不等式约束为字符串数组，只能是：">",">=","<","<=","="，例如,不等式组：
a11*x1+a12*x2+a13*x3+a14*x4+a15*x5<=b1;
a21*x1+a22*x2+a23*x3+a24*x4+a25*x5<=b2;
a31*x1+a32*x2+a33*x3+a34*x4+a35*x5<=b3;
最大差=max{  (a11*x1+a12*x2+a13*x3+a14*x4+a15*x5-b1),   (a21*x1+a22*x2+a23*x3+a24*x4+a25*x5-b2),   (a31*x1+a32*x2+a33*x3+a34*x4+a35*x5-b3)  }，类型为整数(输出浮点数的整数部分)
参考代码（C++）
char *findchar(char *p, char c)
        {
        while (*p)
        {
        if (*p == c) break;
        ++p;
        }
        return p;
        }
5.2.6	整型数组按个位值排序（*）
时间限制：1秒 | 内存限制：262144K | 语言限制：不限
给定一个非空数组（列表），其元素数据类型为整型，请按照数组元素十进制最低位从小到大进行排序，十进制最低位相同的元素，相对位置保持不变。
当数组元素为负值时，十进制最低位等同于去除符号位后对应十进制值最低位。
参考代码（Java）：
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    static StringBuffer sb = new StringBuffer();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String strT;
        while((strT=br.readLine())!=null){
            String[] strs = strT.split(",");
            for(int i=0; i<=9; i++){
                ab(strs, i);
            }
            String str = sb.toString();
            System.out.println(str.substring(0, str.length()-1));
        }
    }
    public static void ab(String[] strs, int index){
        for(int i=0; i<strs.length; i++){
            String str = strs[i];
            if(str.charAt(str.length()-1)-48==index){
                sb.append(str).append(",");
            }
        }
    }
}
