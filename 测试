https://exam.nowcoder.com/test/video
（https://www.nowcoder.com/activity/oj），建议进入“华为机试在线训练”模块进行摸底。另外，“剑指offer”和“leetcode”模块，里面的题目也比较典型。建议考生先在以上模块做摸底，对考试的内容和题型做一个大致的了解后，再进入正式考试环节
考试主要是基础知识的测试，复习时重点关注以下知识点；
1、数组的各种操作（各种排序算法的实现、去重，二维数组）
2、并交集
3、字符串操作（典型如：字符转ascii码后各种操作，之后在转换成字符）
4、堆栈
5、滑窗（如：满足要求的最长字符串），其中最长连续XXX类的题型有50%的概率会遇到，重点掌握；
6、动态规划（二星题目会涉及）
建议了解：贪心、分查找、双指针、图、位运算、二分查找

时间限制：2秒 | 内存限制：102400K | 语言限制：不限
有N个正整数组成的一个序列。给定整数sum，求长度最长的连续子序列，使他们的和等于sum，返回此子序列的长度，如果没有满足要求的序列，返回-1。
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        List<Integer> vals = new ArrayList<>();
        if(in.hasNextLine()){
            String[] si =in.nextLine().split(",");
            for(int i=0;i<si.length;i++){
                vals.add(Integer.valueOf(si[i]));
            }
        }
        int sum = 0;
        if(!in.hasNextLine()){
            System.out.println("-1");
        }else{
            sum = Integer.valueOf(in.nextLine());

            if(vals.size() <= 0){
                System.out.println("-1");
            }else{
                int maxk = -1;

                for(int i=0;i<vals.size();i++){
                    int k =-1;
                    Integer s = Integer.valueOf(vals.get(i));
                    if(s.intValue() == sum){
                        k = 1;
                    }else if(s.intValue() > sum){
                        k=-1;
                    }else {
                        k=1;
                        for (int j = i + 1; j < vals.size(); j++) {
                            s = s+vals.get(j);
                            if(s.intValue() > sum){
                                k=-1;
                                break;
                            }
                            if(s.intValue() == sum){
                                k++;
                                break;
                            }
                            k++;
                        }
                        if(s.intValue() != sum){
                            k = -1;
                        }
                    }
                    maxk = Math.max(maxk,k);
                }

                System.out.println(maxk);
            }
        }
    }
}
